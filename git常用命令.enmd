---
title: git常用命令
notebook: inbox
tags:["git"]
---

### 配置命令`config`

1.  说明
	
	用于配置本机git的相关属性

1.  语法
	
		git config [选项] 属性名 属性值

2.  选项
	
	*	`--global` ：表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址  
		
3.  示例
	
		#设置你的名字和email地址
		$ git config --global user.name "Your Name
		$ git config --global user.email "email@example.com"

### `cd`命令

1.  说明
	
	转换当前目录（类似于linux中的cd命令）

2.  语法
	
		cd 目录名（包括相对目录和觉得目录）

3.  选项
	
	无

4.  示例
		
		cd /d/git_repository

### `mkdir`命令

1.  说明
	
	类似linux中的mkdir命令，创建目录

2.  语法
	
	略

3.  选项
	
	略

4.  示例
	
		mkdir testdir

### `pwd`

1.  说明
	
	类似linux

### `init`命令

1.  说明
	
	将当前目录变成Git可以管理的仓库

2.  语法
	
		git init

3.  选项
	
	略

4.  示例
	
	略

### `add`命令

1.  说明
	
	提交的所有修改放到暂存区

2.  语法
	
		git add file

3.  选项
	
	略

4.  示例
	
		git add readme.txt

### `commit`

1.  说明
	
	暂存区的所有修改提交到分支

2.  语法
	
		git commit [选项]

3.  选项
	
	*	`-m` ：为本次添加说明

4.  示例
	
		git commit -m "add readme file"


### `status`命令

1.  说明
	
	查看修改的文件

2.  语法
	
	git status

3.  选项
	
	略

4.  示例

		git status

### `diff`命令

1.  说明
	
	比较文件修改内容

2.  语法
	
		git  diff file 

3.  选项

	略

4.  示例
	
		git diff readme.txt

### `log`命令

1.  说明
	
	查看历史记录

2.  语法
		
		git log

3.  选项
	
	*	`--pretty`：显示commit id + 提交时的说明

4.  示例
		
		git log --pretty=oneline

### `reset`版本回退命令

1.  说明
	
	将文件的版本回退到以前的版本

2.  语法
	
		git reset [选项] [HEAD^ or commit_id]

		`HEAD`表示当前版本，`HEAD^`表示上一个版本，`HEAD^^`表示上上个版本，一次类推，也可以使用`HEAD~n`表示上n个版本
		其中commit_id为每次提交时生成的id，该id会在每次提交时显示也可以使用`reflog`命令来查看

3.  选项
		
	*	`--hard ` ：略 

4.  示例
		
		##退回到上上个版本
		git reset --hard HEAD^^
		##把暂存区的file的修改撤销掉（unstage），重新放回工作区
		git reset HEAD file

### `reflog`

1.  说明
	
	显示你的历史命令

2.  语法
		
		git reflog

3.  选项
	
	略

4.  示例
		
		git reflog

### `checkout`

1.  说明

	*	用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
	*	从版本库中检出文件或分支

2.  语法
	
		git checkout -- file

3.  选项
		
		*	`--`：不切换到另一个分支
		*	`-b`：创建并切换分支	
			相当于如下两个命令：

				git branch dev
				git checkout dev

4.  示例
		
		##从版本库中检出文件覆盖到工作区
		git checkout -- git常用命令.enmd
		##从主分支中创建并切换分支
		git checkout -b dev

### `branch`

1.  说明
	
	*	创建分支
	*	查询当前分支

2.  语法
	
	git branch [分支名称]

3.  选项
	
	略

4.  示例
	
	##创建dev分支
	git branch dev
	##列出所有分支，当前分支前面会标一个*号
	git branch

### `rm`删除命令

1.  说明
	
	将文件从版本库中移除，移除后要commit

2.  语法
		
		git rm file

3.  选项
		
	略

4.  示例
		
		git rm test.txt

### `remote add`

1.  说明
	
	添加远程仓库（即关联本地仓库和远程仓库）需要在本地仓库的**主目录中执行该命令**

2.  语法
		
		git remote add "远程仓库的别名" 远程仓库的url

3.  选项
	
	略

4.  示例
		
		##通过ssh方式添加远程仓库
		git remote add origin https://github.com/frainmeng/learn.git

### `push`

1.  说明
	
	把本地库的内容推送到远程	

2.  语法
		
		git push [选项] 远程仓库别名 本地仓库分支

3.  选项
	
	*	`-u`：Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

4.  示例

		git push -u origin master

### `clone`

1.  说明
	
	从远程仓库克隆到本地仓库

2.  语法
			
		git clone 远程仓库url

3.  选项
		
	略

4.  示例
	
		git clone git@github.com:frainmeng/learn.git


